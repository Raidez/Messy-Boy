DEFAULT_COLOR = vmath.vector4(0.0, 0.0, 0.0, 0.65)
SELECTED_COLOR = vmath.vector4(0.8, 0.2, 0.5, 0.6)

ACTIONS = { "ultime", "taunt", "attack", "special", "item", "dont", "run" }
TIPS = {
	"Use your ultimate attack (if your trash bar reach a point)",
	"Provoke your opponent to get him more close of your weapon",
	"Attack the first enemy on the line",
	"Deal your power point for specials attacks",
	"Eat food to heal or throw something on your enemy",
	"Why would you do it ?",
	"YOU CAN'T ESCAPE !!! I'm joking"
}

SELECTED_SCALE = vmath.vector3(1.0, 1.0, 1.0)
DEFAULT_SCALE = vmath.vector3(0.4, 0.4, 0.4)

function table.shallow_copy(t)
	local t2 = {}
	for k,v in pairs(t) do
		t2[k] = v
	end
	return t2
end

function init(self)
	self.selected_action_index = 3
	self.actions = {}
	msg.post(".", "acquire_input_focus")
	
	local texture_name = "gui"
	local center_position = vmath.vector3(gui.get_width() / 2, 80, 0)
	local offset = 100
	local position = center_position
	position.x = position.x - offset * self.selected_action_index
	local size = vmath.vector3(1, 1, 1)

	for index, sprite_name in pairs(ACTIONS) do
		-- add sprite action
		local node = gui.new_box_node(position, size)
		gui.set_size_mode(node, gui.SIZE_MODE_AUTO)
		gui.set_texture(node, texture_name)
		gui.play_flipbook(node, sprite_name)
		gui.set_layer(node, "foreground")

		-- add circle behind
		local circle_size = gui.get_size(node)
		circle_size.x = circle_size.x + 30
		circle_size.y = circle_size.y + 30
		local circle = gui.new_pie_node(position, circle_size)
		gui.set_layer(circle, "background")
		gui.set_id(circle, "c" .. index)
		gui.set_color(circle, DEFAULT_COLOR)

		-- implement position
		position.x = position.x + offset

		-- resize other
		gui.set_scale(node, DEFAULT_SCALE)
		gui.set_scale(circle, DEFAULT_SCALE)

		table.insert(self.actions, node)
	end
end

function draw(self)
	for index, node in pairs(self.actions) do
		-- scale n'color
		local circle = gui.get_node("c" .. index)
		if index == self.selected_action_index then
			gui.set_scale(node, SELECTED_SCALE)
			gui.set_scale(circle, SELECTED_SCALE)
			gui.set_color(circle, SELECTED_COLOR)
		else
			gui.set_scale(node, DEFAULT_SCALE)
			gui.set_scale(circle, DEFAULT_SCALE)
			gui.set_color(circle, DEFAULT_COLOR)
		end
	end

	-- show tooltip
	local tip_text = TIPS[self.selected_action_index]
	local tip = gui.get_node("tip")
	gui.set_text(tip, tip_text)
end

function update(self, dt)
	draw(self)
end

function on_input(self, action_id, action)
	if self.selected_action_index > 1 and action_id == hash("left") and action.pressed then
		self.selected_action_index = self.selected_action_index - 1
	elseif self.selected_action_index < 7 and action_id == hash("right") and action.pressed then
		self.selected_action_index = self.selected_action_index + 1
	elseif action_id == hash("action") and action.pressed then
		
	end
end