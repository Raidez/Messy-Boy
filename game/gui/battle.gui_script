DEFAULT_SCALE = vmath.vector3(0.4, 0.4, 0.4)
DEFAULT_COLOR = vmath.vector3(0.35, 0.35, 0.35)
SELECTED_SCALE = vmath.vector3(1.0, 1.0, 1.0)
SELECTED_COLOR = vmath.vector3(0.85, 0.7, 1)
FILLING_COLOR = vmath.vector3(0.7, 0.7, 0.7)
COMPLETED_COLOR = vmath.vector3(0.2, 0.4, 0.2)
ACTIONS = { "ultime", "taunt", "attack", "special", "item", "dont", "run" }
TIPS = {
	"Use your ultimate attack (if you have a green bar)",
	"Provoke your opponent to get him more close of your weapon",
	"Attack the first enemy on the line",
	"Deal your power point for specials attacks",
	"Eat food to heal or throw something on your enemy",
	"Do nothing",
	"Escape the battle"
}



function init(self)
	msg.post(".", "acquire_input_focus")
	self.index = 3
	self.actions = {}
	self.heart = { cur = 19, max = 30 }
	self.special = { cur = 11, max = 20 }
	self.ultime = { lvl = 72, bars = {} }
	self.tips = gui.get_node("tips")
	self.menu = {}
	self.cursor = 1

	-- get actions
	for index, action_name in pairs(ACTIONS) do
		local node = gui.get_node("action_" .. action_name)
		table.insert(self.actions, node)
	end

	-- get trash bars
	for i = 1, 5, 1 do
		local node = gui.get_node("trash_level" .. i)
		table.insert(self.ultime["bars"], node)
	end
end

function render_trash(self)
	-- hide all bar
	local size = vmath.vector3(0, 0, 0)
	for index, node in pairs(self.ultime["bars"]) do
		gui.set_size(node, size)
		gui.set_color(node, FILLING_COLOR)
	end
	
	-- show filled bars
	size = vmath.vector3(100, 40, 0)
	local filled_bars = self.ultime["lvl"] / 20
	for i = 1, math.floor(filled_bars), 1 do
		local node = self.ultime["bars"][i]
		gui.set_size(node, size)
		gui.set_color(node, COMPLETED_COLOR)
	end

	-- resize the current bar
	local current = self.ultime["bars"][math.floor(filled_bars + 1)]
	if current ~= nil then
		size.x = (filled_bars - math.floor(filled_bars)) * size.x
		gui.set_size(current, size)
	end
end

function draw(self)
	-- render heart/special
	local heart = gui.get_node("heart_text")
	gui.set_text(heart, self.heart["cur"] .. "/" .. self.heart["max"])
	local special = gui.get_node("special_text")
	gui.set_text(special, self.special["cur"] .. "/" .. self.special["max"])

	-- render trash bars
	render_trash(self)

	-- switch ultime icon
	local ultime = gui.get_node("ultime_sprite")
	if self.ultime["lvl"] < 20 then
		gui.play_flipbook(ultime, "no_ultime")
	else
		gui.play_flipbook(ultime, "ultime")
	end
	
	-- scale n'color actions
	for index, node in pairs(self.actions) do
		if index == self.index then
			gui.set_scale(node, SELECTED_SCALE)
			gui.set_color(node, SELECTED_COLOR)
		else
			gui.set_scale(node, DEFAULT_SCALE)
			gui.set_color(node, DEFAULT_COLOR)
		end
	end

	-- show tooltip
	gui.set_text(self.tips, TIPS[self.index])
end

function update(self, dt)
	if self.heart["cur"] < 0 then self.heart["cur"] = 0 elseif self.heart["cur"] > self.heart["max"] then self.heart["cur"] = self.heart["max"] end
	if self.special["cur"] < 0 then self.special["cur"] = 0 elseif self.special["cur"] > self.special["max"] then self.special["cur"] = self.special["max"] end
	if self.ultime["lvl"] < 0 then self.ultime["lvl"] = 0 elseif self.ultime["lvl"] > 100 then self.ultime["lvl"] = 100 end
	if self.index < 1 then self.index = 1 elseif self.index > 7 then self.index = 7 end
	if self.cursor < 1 then self.cursor = 1 end
	
	draw(self)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("heart") then
		if message[1] then self.heart["cur"] = self.heart["cur"] + message[1] end
		if message[2] then self.heart["max"] = self.heart["max"] + message[2] end
	elseif message_id == hash("special") then
		if message[1] then self.special["cur"] = self.special["cur"] + message[1] end
		if message[2] then self.special["max"] = self.special["max"] + message[2] end
	elseif message_id == hash("trash") then
		if message[1] then self.ultime["lvl"] = self.ultime["lvl"] + message[1] end
	elseif message_id == hash("action") then
		if message[1] then
			self.index = self.index + message[1]
		else
			msg.post(sender, "action", { ACTIONS[self.index] })
		end
	elseif message_id == hash("menu") then
		if message[1] then
			self.cursor = self.cursor + message[1]
		else
			self.menu = message[2]
		end
	elseif message_id == hash("cancel") then
	elseif message_id == hash("help") then
	end
end
